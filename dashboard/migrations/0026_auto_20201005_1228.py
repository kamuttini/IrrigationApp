# Generated by Django 2.2.10 on 2020-10-05 10:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('dashboard', '0025_auto_20201001_1217'),
    ]

    operations = [
        migrations.AlterField(
            model_name='area',
            name='irrigation_type',
            field=models.CharField(choices=[('M', 'Manuale'), ('C', 'Programmata'), ('S', 'Intelligente')], default='M', max_length=1),
        ),
        migrations.AlterField(
            model_name='area',
            name='last_irrigation',
            field=models.DateTimeField(default='2012-01-01 00:01', editable=False, verbose_name='ultima irrigazione'),
        ),
        migrations.AlterField(
            model_name='area',
            name='name',
            field=models.CharField(max_length=10),
        ),
        migrations.AlterField(
            model_name='garden',
            name='last_rain',
            field=models.DateTimeField(default='2012-01-01 00:01', editable=False, verbose_name='ultima pioggia'),
        ),
        migrations.AlterField(
            model_name='garden',
            name='next_rain',
            field=models.DateTimeField(default='2012-01-01 00:01'),
        ),
        migrations.AlterField(
            model_name='irrigation',
            name='date',
            field=models.DateField(verbose_name='data di irrigazione'),
        ),
        migrations.AlterField(
            model_name='irrigation',
            name='irrigation_type',
            field=models.CharField(choices=[('M', 'Manuale'), ('C', 'Programmata'), ('S', 'Intelligente')], default='M', max_length=1),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(verbose_name='age')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
